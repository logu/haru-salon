#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var sockets = require('../sockets');
var debug = require('debug')('haru-ihm:server');
var http = require('http');
// Open event example

var SerialPort = require('serialport');
var port = new SerialPort('/dev/ttyACM0');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var websock = sockets.init(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/* eslint-disable node/no-missing-require */
'use strict';



port.on('open', function () {
  console.log('Port Opened');
});

port.write('main screen turn on', function (err) {
  if (err) {
    return console.log('Error: ', err.message);
  }
  console.log('message written');
});

port.on('data', function (data) {
  /* get a buffer of data from the serial port */
  if(data.toString().indexOf('RED') >= 0){
    websock.emit('cmd', 'HOT');
    console.log('HOT');
  }

  if(data.toString().indexOf('GREEN') >= 0){
    websock.emit('cmd', 'AIR');
    console.log('AIR');
  }

  if(data.toString().indexOf('BLUE') >= 0){
    websock.emit('cmd', 'OK');
    console.log('OK');
  }
});